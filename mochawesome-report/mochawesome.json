{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-28T10:13:52.213Z",
    "end": "2024-12-28T10:13:52.358Z",
    "duration": 145,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f118b1d4-3c95-48ae-bbc4-2ece3e08d1a6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 77,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await mongoose.connect('mongodb://localhost:27017/testDB', {\n  serverSelectionTimeoutMS: 10000, // Increase timeout if necessary\n})\n// Clear existing data\nawait Subscriber.deleteMany({})\n// Insert mock data\nawait Subscriber.create([\n  {\n    name: 'John Doe',\n    subscribedChannel: 'Channel 1',\n    subscribedDate: new Date(),\n  },\n  {\n    name: 'Jane Doe',\n    subscribedChannel: 'Channel 2',\n    subscribedDate: new Date(),\n  },\n])",
          "err": {},
          "uuid": "49cd6e6b-2ee3-4dfd-925b-564179e8d6a5",
          "parentUUID": "f118b1d4-3c95-48ae-bbc4-2ece3e08d1a6",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await mongoose.connection.close() // Close the database connection after tests",
          "err": {},
          "uuid": "c70d0ab6-7bc4-4cc9-8df1-f9b35217aa50",
          "parentUUID": "f118b1d4-3c95-48ae-bbc4-2ece3e08d1a6",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "2b557b39-0246-4cae-b927-e8b529d5f75e",
          "title": "Subscribers API",
          "fullFile": "/Users/VikasDhyani/Downloads/Subscribers-Mongo-Node-BoilerPlate-main/test/subscriber.test.js",
          "file": "/test/subscriber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch all subscribers",
              "fullTitle": "Subscribers API should fetch all subscribers",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/subscribers')\nexpect(res.status).to.equal(200)\nexpect(res.body).to.be.an('array')\nexpect(res.body[0]).to.have.property('name')\nexpect(res.body[0]).to.have.property('subscribedChannel')",
              "err": {},
              "uuid": "2e23c67c-5c9c-4dc5-8858-94b5aaa87641",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch subscribers by name",
              "fullTitle": "Subscribers API should fetch subscribers by name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/subscribers/names')\nexpect(res.status).to.equal(200)\nexpect(res.body).to.be.an('array')\nexpect(res.body[0]).to.have.property('name')\nexpect(res.body[0]).to.have.property('subscribedChannel')",
              "err": {},
              "uuid": "acaccbbe-2c72-4558-b5b3-0fd4e71dbe22",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new subscriber",
              "fullTitle": "Subscribers API should create a new subscriber",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = {\n  name: 'Mark Twain',\n  subscribedChannel: 'Channel 3',\n  subscribedDate: new Date(),\n}\nconst res = await request(app).post('/subscribers').send(newSubscriber)\nexpect(res.status).to.equal(201)\nexpect(res.body).to.have.property('name', 'Mark Twain')\nexpect(res.body).to.have.property('subscribedChannel', 'Channel 3')",
              "err": {},
              "uuid": "0add170f-8b4d-4a2d-b946-6da111af51bd",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new subscriber with name and channel only",
              "fullTitle": "Subscribers API should create a new subscriber with name and channel only",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = {\n  name: 'Sarah Lee',\n  subscribedChannel: 'Channel 4',\n}\nconst res = await request(app)\n  .post('/subscribers/names')\n  .send(newSubscriber)\nexpect(res.status).to.equal(201)\nexpect(res.body).to.have.property('name', 'Sarah Lee')\nexpect(res.body).to.have.property('subscribedChannel', 'Channel 4')",
              "err": {},
              "uuid": "9134449f-0dcb-4279-b6da-8d543048d2de",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch a subscriber by ID",
              "fullTitle": "Subscribers API should fetch a subscriber by ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const subscriber = await Subscriber.findOne()\nconst res = await request(app).get(`/subscribers/${subscriber._id}`) // Corrected with backticks\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('name')\nexpect(res.body).to.have.property('subscribedChannel')",
              "err": {},
              "uuid": "f179e5da-7725-459d-9751-6b95bc92e8b2",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existing subscriber ID",
              "fullTitle": "Subscribers API should return 404 for non-existing subscriber ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingId = new mongoose.Types.ObjectId()\nconst res = await request(app).get(`/subscribers/${nonExistingId}`) // Corrected with backticks\nexpect(res.status).to.equal(404)\nexpect(res.body).to.have.property('message', 'Subscriber not found')",
              "err": {},
              "uuid": "4e81f84f-799d-4efe-a8d1-cb2765d3245c",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a subscriber by ID",
              "fullTitle": "Subscribers API should update a subscriber by ID",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const subscriber = await Subscriber.findOne()\nconst updatedData = {\n  name: 'Updated Name',\n  subscribedChannel: 'Updated Channel',\n  subscribedDate: new Date(),\n}\nconst res = await request(app)\n  .post(`/subscribers/${subscriber._id}`) // Corrected with backticks\n  .send(updatedData)\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('name', 'Updated Name')\nexpect(res.body).to.have.property('subscribedChannel', 'Updated Channel')",
              "err": {},
              "uuid": "413de16e-e23c-48cf-a341-9525b48bda3f",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when updating non-existing subscriber",
              "fullTitle": "Subscribers API should return 404 when updating non-existing subscriber",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingId = new mongoose.Types.ObjectId()\nconst updatedData = {\n  name: 'New Name',\n  subscribedChannel: 'New Channel',\n  subscribedDate: new Date(),\n}\nconst res = await request(app)\n  .post(`/subscribers/${nonExistingId}`) // Corrected with backticks\n  .send(updatedData)\nexpect(res.status).to.equal(404)\nexpect(res.body).to.have.property('message', 'Subscriber not found')",
              "err": {},
              "uuid": "e721a098-4334-42d3-b011-2c745629e3ed",
              "parentUUID": "2b557b39-0246-4cae-b927-e8b529d5f75e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e23c67c-5c9c-4dc5-8858-94b5aaa87641",
            "acaccbbe-2c72-4558-b5b3-0fd4e71dbe22",
            "0add170f-8b4d-4a2d-b946-6da111af51bd",
            "9134449f-0dcb-4279-b6da-8d543048d2de",
            "f179e5da-7725-459d-9751-6b95bc92e8b2",
            "4e81f84f-799d-4efe-a8d1-cb2765d3245c",
            "413de16e-e23c-48cf-a341-9525b48bda3f",
            "e721a098-4334-42d3-b011-2c745629e3ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}