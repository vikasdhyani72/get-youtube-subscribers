{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-29T09:30:20.190Z",
    "end": "2024-12-29T09:30:20.318Z",
    "duration": 128,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "141fe928-496b-4159-a5ef-5ee193f2ab4a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 68,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await mongoose.connect('mongodb://127.0.0.1:27017/testDB', {\n  serverSelectionTimeoutMS: 20000, // Increase timeout if necessary\n})\n// Clear existing data\nawait Subscriber.deleteMany({})\n// Insert mock data\nawait Subscriber.create([\n  {\n    name: 'John Doe',\n    subscribedChannel: 'Channel 1',\n    subscribedDate: new Date(),\n  },\n  {\n    name: 'Jane Doe',\n    subscribedChannel: 'Channel 2',\n    subscribedDate: new Date(),\n  },\n])",
          "err": {},
          "uuid": "75e07949-e81c-4055-80b4-2788749594dc",
          "parentUUID": "141fe928-496b-4159-a5ef-5ee193f2ab4a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await mongoose.connection.close() // Close the database connection after tests",
          "err": {},
          "uuid": "0a650c98-8bfa-461e-a939-f9793371d200",
          "parentUUID": "141fe928-496b-4159-a5ef-5ee193f2ab4a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "16567228-144f-48b9-b601-4839dde294c5",
          "title": "Subscribers API",
          "fullFile": "/Users/VikasDhyani/Downloads/Subscribers-Mongo-Node-BoilerPlate-main/test/subscriber.test.js",
          "file": "/test/subscriber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch all subscribers",
              "fullTitle": "Subscribers API should fetch all subscribers",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/subscribers')\nexpect(res.status).to.equal(200)\nexpect(res.body).to.be.an('array')\nexpect(res.body[0]).to.have.property('name')\nexpect(res.body[0]).to.have.property('subscribedChannel')",
              "err": {},
              "uuid": "193ea41e-2e6e-4b49-a50a-1e9563bef657",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch subscribers by name",
              "fullTitle": "Subscribers API should fetch subscribers by name",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/subscribers/names')\nexpect(res.status).to.equal(200)\nexpect(res.body).to.be.an('array')\nexpect(res.body[0]).to.have.property('name')\nexpect(res.body[0]).to.have.property('subscribedChannel')",
              "err": {},
              "uuid": "452e9c7e-fd03-45d3-a25a-68553e9873d6",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new subscriber",
              "fullTitle": "Subscribers API should create a new subscriber",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = {\n  name: 'Mark Twain',\n  subscribedChannel: 'Channel 3',\n  subscribedDate: new Date(),\n}\nconst res = await request(app).post('/subscribers').send(newSubscriber)\nexpect(res.status).to.equal(201)\nexpect(res.body).to.have.property('name', 'Mark Twain')\nexpect(res.body).to.have.property('subscribedChannel', 'Channel 3')",
              "err": {},
              "uuid": "3c47558e-9699-4d51-a08c-ba16100e840a",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new subscriber with name and channel only",
              "fullTitle": "Subscribers API should create a new subscriber with name and channel only",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSubscriber = {\n  name: 'Sarah Lee',\n  subscribedChannel: 'Channel 4',\n}\nconst res = await request(app)\n  .post('/subscribers/names')\n  .send(newSubscriber)\nexpect(res.status).to.equal(201)\nexpect(res.body).to.have.property('name', 'Sarah Lee')\nexpect(res.body).to.have.property('subscribedChannel', 'Channel 4')",
              "err": {},
              "uuid": "25c94969-7ceb-42ac-8057-d3644b5b16fc",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch a subscriber by ID",
              "fullTitle": "Subscribers API should fetch a subscriber by ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const subscriber = await Subscriber.findOne()\nconst res = await request(app).get(`/subscribers/${subscriber._id}`) // Corrected with backticks\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('name')\nexpect(res.body).to.have.property('subscribedChannel')",
              "err": {},
              "uuid": "480c454a-e1ea-4610-83a9-9a9af21f1e11",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existing subscriber ID",
              "fullTitle": "Subscribers API should return 404 for non-existing subscriber ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingId = new mongoose.Types.ObjectId()\nconst res = await request(app).get(`/subscribers/${nonExistingId}`) // Corrected with backticks\nexpect(res.status).to.equal(404)\nexpect(res.body).to.have.property('message', 'Subscriber not found')",
              "err": {},
              "uuid": "97e014e3-27fc-487c-8bc3-a63baf7bb2c1",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a subscriber by ID",
              "fullTitle": "Subscribers API should update a subscriber by ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const subscriber = await Subscriber.findOne()\nconst updatedData = {\n  name: 'Updated Name',\n  subscribedChannel: 'Updated Channel',\n  subscribedDate: new Date(),\n}\nconst res = await request(app)\n  .post(`/subscribers/${subscriber._id}`) // Corrected with backticks\n  .send(updatedData)\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('name', 'Updated Name')\nexpect(res.body).to.have.property('subscribedChannel', 'Updated Channel')",
              "err": {},
              "uuid": "23c3c367-1ab3-4a1c-ac34-b088a75eabeb",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when updating non-existing subscriber",
              "fullTitle": "Subscribers API should return 404 when updating non-existing subscriber",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingId = new mongoose.Types.ObjectId()\nconst updatedData = {\n  name: 'New Name',\n  subscribedChannel: 'New Channel',\n  subscribedDate: new Date(),\n}\nconst res = await request(app)\n  .post(`/subscribers/${nonExistingId}`) // Corrected with backticks\n  .send(updatedData)\nexpect(res.status).to.equal(404)\nexpect(res.body).to.have.property('message', 'Subscriber not found')",
              "err": {},
              "uuid": "f154f16f-dd4b-429a-9f7a-7ed3a3f1f3db",
              "parentUUID": "16567228-144f-48b9-b601-4839dde294c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "193ea41e-2e6e-4b49-a50a-1e9563bef657",
            "452e9c7e-fd03-45d3-a25a-68553e9873d6",
            "3c47558e-9699-4d51-a08c-ba16100e840a",
            "25c94969-7ceb-42ac-8057-d3644b5b16fc",
            "480c454a-e1ea-4610-83a9-9a9af21f1e11",
            "97e014e3-27fc-487c-8bc3-a63baf7bb2c1",
            "23c3c367-1ab3-4a1c-ac34-b088a75eabeb",
            "f154f16f-dd4b-429a-9f7a-7ed3a3f1f3db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}